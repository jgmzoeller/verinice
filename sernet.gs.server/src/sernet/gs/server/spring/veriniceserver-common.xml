<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd" >

	<!--
	All configuration options for the verinice server are available in the
	veriniceserver-plain.properties .
	
	(Note: The OSGi-based internal server does not need manual configuration.)
 -->

	<!--
Spring configuration of application components.

This variant:
	Wiring command service for direct database access using hibernate on veriniceserver.

-->

	<!-- BEGIN Server settings ========================================================================= -->


	<bean id="veriniceAccessManagerPostProcessor" class="sernet.gs.server.security.VeriniceAccessDecisionManagerPostProcessor" />

	<bean id="serverInitializer" class="sernet.gs.service.ServerInitializer" init-method="initialize">
		<property name="workObjects" ref="workObjects" />
		<property name="hibernateCommandService" ref="hibernateCommandService" />
	</bean>

	<!-- Server configuration properties and initialization -->

	<!--
	The following section initializes beans which are needed by the
 	commands (e.g. LoadBausteine et al) as well as various other classes.
 	
 	The beans are configured for use in the verinice server (the client
 	uses the same classes but in a different configuration) and are made
 	available via the VeriniceContext class (look it up for further details).
    -->

	<bean id="gsScraperUtil" class="sernet.verinice.service.parser.GSScraperUtil" >
		<property name="model">
			<bean class="sernet.verinice.service.parser.BSIMassnahmenModel">
				<constructor-arg>
					<bean class="sernet.verinice.service.gstoolimport.BSIConfigurationServer">
						<property name="grundschutzKataloge" value="${veriniceserver.grundschutzKataloge}" />
						<property name="datenschutzBaustein" value="${veriniceserver.datenschutzBaustein}" />
					</bean>
				</constructor-arg>
			</bean>
		</property>
	</bean>

	<bean id="huiTypeFactory" class="sernet.hui.common.connect.HUITypeFactory">
		<constructor-arg value="${snca.resource}" />
	</bean>
    
  <!-- 
	<bean id="hitroUtil" class="sernet.hui.common.connect.HitroUtil"
		init-method="initForServer">
  -->
  <bean id="hitroUtil" class="sernet.hui.common.connect.HitroUtil" init-method="initForServer">
		<property name="typeFactory" ref="huiTypeFactory" />
		<property name="entityResolverFactory">
			<bean class="sernet.gs.ui.rcp.main.bsi.model.BSIEntityResolverFactory"/>
		</property>
	</bean>
    
  <bean id="layoutConfig" class="sernet.verinice.service.model.WebLayoutConfig"/>

	<bean id="workObjects" class="sernet.hui.common.VeriniceContext$State">
    <property name="map">
        <map>
            <entry key="gsScraperUtil" value-ref="gsScraperUtil" />
            <entry key="hitroUtil" value-ref="hitroUtil" />
            <entry key="huiTypeFactory" value-ref="huiTypeFactory" />
            <entry key="commandService" value-ref="commandService" />
            <entry key="authService" value-ref="authService" />
            <entry key="taskService" value-ref="taskService" />
            <entry key="rightsServerHandler" value-ref="rightsServerHandler" />
            <entry key="remindService" value-ref="remindService" />
            <entry key="isaQmService" value-ref="isaQmService" />
            <entry key="gsmService" value-ref="gsmService" />
            <entry key="processEngine" value-ref="processEngine" />
            <entry key="validationService" value-ref="validationService" />
            <entry key="accountService" value-ref="accountService" />
            <entry key="reportdepositService" value-ref="reportdepositService" />
            <entry key="reportHQLService" value-ref="reportHQLService" />
            <entry key="configurationService" value-ref="configurationService" />
            <entry key="objectModelService" value-ref="objectModelService" />
            <entry key="updateNewsService" value-ref="updateNewsService" />
            <entry key="licenseManagementService" value-ref="licenseManagementService" />
            <entry key="encryptionService" value-ref="encryptionService" />
            <entry key="graphService" value-ref="graphService" />
            <entry key="countService" value-ref="countService" />
            <entry key="individualService" value-ref="individualService" />
            <entry key="layoutConfig" value-ref="layoutConfig" />
            <entry key="itbpRiskService" value-ref="itbpRiskService" />
        </map>
    </property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- c3p0 config parameter: http://www.mchange.com/projects/c3p0/index.html -->
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minPoolSize" value="10" />
		<property name="initialPoolSize" value="10" />
		<property name="maxPoolSize" value="60" />
		<property name="acquireIncrement" value="5" />
		<property name="maxStatements" value="100" />
		<property name="checkoutTimeout" value="10000" />
		<property name="idleConnectionTestPeriod" value="180" />
        <property name="numHelperThreads" value="6" />
	</bean>

	<bean id="sessionFactory" depends-on="schemaCreator" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">

		<property name="hibernateProperties">
			<value>hibernate.dialect=${jdbc.hibernate.dialect}</value>
		</property>

		<property name="dataSource" ref="dataSource" />

		<property name="configLocation">
			<value>${hibernate.config.resource}</value>
		</property>

	</bean>

    <!-- Updates database to a new version if necessary -->
    <!-- Is called before Hibernate sessionFactory is created -->
	<bean id="schemaCreator" class="sernet.gs.server.SchemaCreator">
		<property name="dataSource" ref="dataSource" />
        <property name="dbUpdate97To98" ref="dbUpdate97To98" />
        <property name="dbUpdate98To99" ref="dbUpdate98To99" />
	</bean>
    
    <bean id="dbUpdate97To98" class="sernet.gs.server.DbUpdate97To98">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <bean id="dbUpdate98To99" class="sernet.gs.server.DbUpdate98To99">
        <property name="dataSource" ref="dataSource" />
    </bean>


	<bean id="daoFactory" class="sernet.verinice.service.DAOFactory">
		<property name="propertyListDao" ref="propertyListDao" />
		<property name="propertyDao" ref="propertyDao" />
		<property name="entityDao" ref="entityDao" />
		<property name="cnaLinkDao" ref="cnaLinkDao" />
    <property name="cnaTreeElementDao" ref="cnaTreeElementDao" />
		<property name="finishedRiskAnalysisListsDAO" ref="finishedRiskAnalysisListsDAO" />
		<property name="gefaehrdungDao" ref="gefaehrdungDao" />
		<property name="ownGefaehrdungDao" ref="ownGefaehrdungDao" />
		<property name="configurationDao" ref="configurationDao" />
		<property name="bausteinVorschlagDao" ref="bausteinVorschlagDao" />
		<property name="changeLogEntryDAO" ref="changeLogEntryDAO" />
		<property name="permissionDAO" ref="permissionDAO" />
		<property name="additionDAO" ref="additionDAO" />
		<property name="noteDAO" ref="noteDAO" />
		<property name="attachmentDao" ref="attachmentDao" />
		<property name="attachmentFileDAO" ref="attachmentFileDAO" />

		<!-- DAOs for subclasses of CnATreeElement: -->
		<property name="anwendungDAO" ref="anwendungDAO" />
		<property name="anwendungenKategorieDAO" ref="anwendungenKategorieDAO" />
		<property name="bausteinUmsetzungDAO" ref="bausteinUmsetzungDAO" />
		<property name="BSIModelDAO" ref="BSIModelDAO" />
		<property name="clientDAO" ref="clientDAO" />
		<property name="clientsKategorieDAO" ref="clientsKategorieDAO" />
		<property name="datenverarbeitungDAO" ref="datenverarbeitungDAO" />
		<property name="finishedRiskAnalysisDAO" ref="finishedRiskAnalysisDAO" />
		<property name="gebaeudeDAO" ref="gebaeudeDAO" />
		<property name="gebaeudeKategorieDAO" ref="gebaeudeKategorieDAO" />
		<property name="gefaehrdungsUmsetzungDAO" ref="gefaehrdungsUmsetzungDAO" />
		<property name="ITVerbundDAO" ref="ITVerbundDAO" />
		<property name="secureItVerbundDAO" ref="secureItVerbundDAO" />
		<property name="massnahmenUmsetzungDAO" ref="massnahmenUmsetzungDAO" />
		<property name="netzKomponenteDAO" ref="netzKomponenteDAO" />
		<property name="NKKategorieDAO" ref="NKKategorieDAO" />
		<property name="personDAO" ref="personDAO" />
		<property name="personengruppenDAO" ref="personengruppenDAO" />
		<property name="personenKategorieDAO" ref="personenKategorieDAO" />
		<property name="raeumeKategorieDAO" ref="raeumeKategorieDAO" />
		<property name="raumDAO" ref="raumDAO" />
		<property name="serverDAO" ref="serverDAO" />
		<property name="serverKategorieDAO" ref="serverKategorieDAO" />
		<property name="sonstigeITKategorieDAO" ref="sonstigeITKategorieDAO" />
		<property name="sonstITDAO" ref="sonstITDAO" />
		<property name="stellungnahmeDSBDAO" ref="stellungnahmeDSBDAO" />
		<property name="telefonKomponenteDAO" ref="telefonKomponenteDAO" />
		<property name="TKKategorieDAO" ref="TKKategorieDAO" />
		<property name="verantwortlicheStelleDAO" ref="verantwortlicheStelleDAO" />
		<property name="verarbeitungsangabenDAO" ref="verarbeitungsangabenDAO" />
		<property name="zweckbestimmungDAO" ref="zweckbestimmungDAO" />
		<property name="risikoMassnahmeDAO" ref="risikoMassnahmeDAO" />
		<property name="ownGefaehrdungDAO" ref="ownGefaehrdungDAO" />
		<!-- ISO 27000 Daos -->
		<property name="ISO27KModelDAO" ref="ISO27KModelDAO" />
		<property name="organizationDAO" ref="organizationDAO" />
		<property name="assetGroupDAO" ref="assetGroupDAO" />
		<property name="assetDAO" ref="assetDAO" />
		<property name="controlGroupDAO" ref="controlGroupDAO" />
		<property name="controlDAO" ref="controlDAO" />
		<property name="auditGroupDAO" ref="auditGroupDAO" />
		<property name="auditDAO" ref="auditDAO" />
		<property name="exceptionGroupDAO" ref="exceptionGroupDAO" />
		<property name="exceptionDAO" ref="exceptionDAO" />
		<property name="personGroupDAO" ref="personGroupDAO" />
		<property name="personIsoDAO" ref="personIsoDAO" />
		<property name="requirementGroupDAO" ref="requirementGroupDAO" />
		<property name="requirementDAO" ref="requirementDAO" />	
		<property name="incidentGroupDAO" ref="incidentGroupDAO" />
		<property name="incidentDAO" ref="incidentDAO" />
		<property name="incidentScenarioGroupDAO" ref="incidentScenarioGroupDAO" />
		<property name="incidentScenarioDAO" ref="incidentScenarioDAO" />
		<property name="responseGroupDAO" ref="responseGroupDAO" />
		<property name="responseDAO" ref="responseDAO" />
		<property name="threatGroupDAO" ref="threatGroupDAO" />
		<property name="threatDAO" ref="threatDAO" />
		<property name="vulnerabilityGroupDAO" ref="vulnerabilityGroupDAO" />
		<property name="vulnerabilityDAO" ref="vulnerabilityDAO" />
		<property name="documentGroupDAO" ref="documentGroupDAO" />
		<property name="documentDAO" ref="documentDAO" />
		<property name="evidenceGroupDAO" ref="evidenceGroupDAO" />
		<property name="evidenceDAO" ref="evidenceDAO" />
		<property name="interviewGroupDAO" ref="interviewGroupDAO" />
		<property name="interviewDAO" ref="interviewDAO" />
		<property name="findingGroupDAO" ref="findingGroupDAO" />
		<property name="findingDAO" ref="findingDAO" />
		<property name="processGroupDAO" ref="processGroupDAO" />
		<property name="processDAO" ref="processDAO" />
		<property name="recordGroupDAO" ref="recordGroupDAO" />
		<property name="recordDAO" ref="recordDAO" />
    <!-- Self Assessment (SAMT) Daos -->
    <property name="samtTopicDAO" ref="samtTopicDAO" />   
		<!-- Modernized ITBP DAOs -->
		<property name="applicationDAO" ref="applicationDAO" />
    <property name="bpPersonDAO" ref="bpPersonDAO" />
    <property name="bpRequirementDAO" ref="bpRequirementDAO" />
    <property name="bpThreatDAO" ref="bpThreatDAO" />
		<property name="businessProcessDAO" ref="businessProcessDAO" />
    <property name="deviceDAO" ref="deviceDAO" />
		<property name="icsSystemDAO" ref="icsSystemDAO" />
		<property name="itNetworkDAO" ref="itNetworkDAO" />
		<property name="itSystemDAO" ref="itSystemDAO" />
		<property name="networkDAO" ref="networkDAO" />
		<property name="roomDAO" ref="roomDAO" />
    <property name="safeguardDAO" ref="safeguardDAO" />
    <property name="bpDocumentDAO" ref="bpDocumentDAO" />
    <property name="bpIncidentDAO" ref="bpIncidentDAO" />
    <property name="bpRecordDAO" ref="bpRecordDAO" />
		<property name="bpModelDAO" ref="bpModelDAO" />
		<property name="applicationGroupDAO" ref="applicationGroupDAO" />
    <property name="bpPersonGroupDAO" ref="bpPersonGroupDAO" />
    <property name="bpRequirementGroupDAO" ref="bpRequirementGroupDAO" />
    <property name="bpThreatGroupDAO" ref="bpThreatGroupDAO" />
		<property name="businessProcessGroupDAO" ref="businessProcessGroupDAO" />
    <property name="deviceGroupDAO" ref="deviceGroupDAO" />
		<property name="icsSystemGroupDAO" ref="icsSystemGroupDAO" />
		<property name="itSystemGroupDAO" ref="itSystemGroupDAO" />
		<property name="networkGroupDAO" ref="networkGroupDAO" />
		<property name="roomGroupDAO" ref="roomGroupDAO" />
    <property name="safeguardGroupDAO" ref="safeguardGroupDAO" />
    <property name="bpDocumentGroupDAO" ref="bpDocumentGroupDAO" />
    <property name="bpIncidentGroupDAO" ref="bpIncidentGroupDAO" />
    <property name="bpRecordGroupDAO" ref="bpRecordGroupDAO" />

        <!-- Miscellaneous DAOs -->
        <property name="importIsoDAO" ref="importIsoDAO" /> 
        <property name="importBsiDAO" ref="importBsiDAO" />  
        <property name="importBpDAO" ref="importBpDAO" />   
        <property name="elementEntityDao" ref="elementEntityDao" /> 
        
        <!-- unsecure daos (does not respect access rights or scope only restrictions -->
        <property name="unsecureAssetDAO" ref="unsecureAssetDAO" />
        <property name="unsecureIncidentScenarioDAO" ref="unsecureIncidentScenarioDAO" />
        
        
        <property name="finishedRiskAnalysisListsDao" ref="finishedRiskAnalysisListsDao" />
        <property name="catalogModelDAO" ref="catalogModelDao" />
	</bean>

  <!-- Documentation of the transaction management of Spring 1.2 used here: -->
  <!-- https://docs.spring.io/spring/docs/1.2.x/reference/transaction.html -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref bean="sessionFactory" />
		</property>
	</bean>

	<bean id="baseTxProxy" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean" abstract="true">
		<property name="transactionManager" ref="txManager" />
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<bean id="serverExceptionHandler" class="sernet.gs.server.ServerExceptionHandler" />

	<bean id="hibernateCommandService" class="sernet.verinice.service.HibernateCommandService">
		<property name="daoFactory" ref="daoFactory" />
		<property name="exceptionHandler" ref="serverExceptionHandler" />
		<property name="authService" ref="authService" />
		<property name="ldapService" ref="ldapService" />
        <property name="configurationService" ref="configurationService" />
        <property name="rightsServerHandler" ref="rightsServerHandler" />
        <property name="graphService" ref="graphService" />
        <property name="vnaSchemaVersion" ref="vnaSchemaVersion" />
        <property name="commandActionIds" ref="command-actionid-mapping"/>
	</bean>
    
	<bean id="commandService" parent="baseTxProxy" depends-on="hibernateCommandService">
		<property name="target" ref="hibernateCommandService" />
		<property name="transactionAttributes">
			<props merge="true">
				<prop key="executeCommand">PROPAGATION_REQUIRED,-sernet.gs.ui.rcp.main.service.commands.UsernameExistsException,-sernet.verinice.interfaces.CommandException</prop>
			</props>
		</property>
	</bean>

    
    <bean id="configurationServiceImpl" class="sernet.verinice.service.ConfigurationService">
        <property name="configurationDao" ref="configurationDao" />
		<property name="authService" ref="authService" />
		<property name="commandService" ref="commandService" />
        <property name="cnaTreeElementDao" ref="cnaTreeElementDao" />
    </bean>
    
    
    <bean id="configurationService" parent="baseTxProxy">
        <property name="target" ref="configurationServiceImpl" />
        <property name="transactionAttributes">
            <props merge="true">
                <prop key="loadUserData">PROPAGATION_SUPPORTS,readOnly</prop>
            </props>
        </property>
    </bean>
    
    <bean id="rightsServiceMessages" class="sernet.verinice.service.AuthMessageSource">
        <property name="basename">
            <value>/WEB-INF/verinice-auth-messages</value>
        </property>
    </bean>
    
    <bean id="validationService" class="sernet.verinice.service.ValidationService">
    	<property name="commandService" ref="commandService" />
    	<property name="cnaValidationDAO" ref="cnaValidationDAO" />
    	<property name="cnaTreeElementDAO" ref="cnaTreeElementDao"></property>
    	<property name="huiTypeFactory" ref="huiTypeFactory" />
    </bean>
    
    <bean id="encryptionService" class="sernet.verinice.service.crypto.EncryptionService" />
    
    <!-- A service to load and analyse the element network of verinice with JGraphT. -->
    <!-- JGraphT is a free Java graph library that provides mathematical graph-theory objects and algorithms. -->
    <bean id="graphService" class="sernet.verinice.graph.GraphService">
        <property name="cnaTreeElementDao" ref="cnaTreeElementDao" />
        <property name="cnaLinkDao" ref="cnaLinkDao" />
    </bean>

    <bean id="reportHQLService" class="sernet.verinice.service.ReportHQLService" />

    <bean id="objectModelService" class="sernet.verinice.service.model.HUIObjectModelService">
        <property name="huiTypeFactory" ref="huiTypeFactory" />
    </bean>

    <!-- Count service provides methods to get the number of elements in the database. -->
    <bean id="countService" class="sernet.verinice.service.model.CountElementService">
        <!-- Limit on how many elements can be loaded at once -->
        <property name="limit" value="${veriniceserver.object.limit}" />
        <property name="typeLimitMap" ref="typeLimitMap" />
        <property name="cnaTreeElementDao" ref="cnaTreeElementDao" />
    </bean>

    <!-- Limit on how many elements of a given id can be loaded at once -->
    <!-- The values is this map overrides the default value of property limit in bean countService -->
    <util:map id="typeLimitMap" value-type="java.lang.Integer">
        <!-- The key is the element ID from SNCA.xml, e.g.: -->
        <!--<entry key="asset" value="30000" />-->
    </util:map>

    <bean id="titleCache" class="sernet.verinice.service.ElementTitleCache">
        <property name="loadScopeTitlesCommand" ref="loadScopeTitlesCommand" />
    </bean>
     
     <bean name="loadScopeTitlesCommand" class="sernet.verinice.service.commands.LoadElementTitles">
        <property name="typeIds" value="it-verbund,org,bp_itnetwork"/>
     </bean>

	<!-- Stores the verinice archive version. This schema is written into the
		xml data of the export, so whenever the schema is changed, the property "vnaSchemaVersion"
		should be increased. Also the list to which versions the schema is compatible
		should be extended if possible. -->
	<bean name="vnaSchemaVersion" class="sernet.verinice.service.sync.VnaSchemaVersion"
		factory-method="createVnaSchemaVersion">
		<constructor-arg>
			<!-- The current schema which is written into the xml date export -->
			<value>vna-1.2</value>
		</constructor-arg>
		<constructor-arg>
			<!-- This list to which vna versions the current schema is compatible -->
			<list>
				<value>vna-1.1</value>
				<value>vna-1.0</value>
			</list>
		</constructor-arg>
	</bean>
	
	<!-- uncomment to activate runtime logging of methods defined in veriniceserver-debug.xml -->
	<!--<import resource="veriniceserver-debug.xml"/> -->

    <bean id="loadBcProvider"
          class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="java.security.Security.addProvider"/>
        <property name="arguments">
            <list>
                <bean class="org.bouncycastle.jce.provider.BouncyCastleProvider"/>
            </list>
        </property>
    </bean>
    
    <bean id="migrateElementJobImpl" class="sernet.verinice.service.bp.migration.MigrateElementJobImpl" scope="prototype">  
        <property name="commandService" ref="hibernateCommandService" />
        <property name="linkDao" ref="cnaLinkDao" />
    </bean>
    <bean id="migrateElementJob" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"  scope="prototype">
        <property name="transactionManager" ref="txManager" />
        <property name="target" ref="migrateElementJobImpl" />
        <property name="transactionAttributes">
            <props>
                <prop key="migrateModeling">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean> 
    
    <bean id="migrateItNetworkJobImpl" class="sernet.verinice.service.bp.migration.MigrateItNetworkJob" scope="prototype">
        <property name="graphService" ref="graphService" />
        <property name="commandService" ref="hibernateCommandService" />
        <property name="elementDao" ref="cnaTreeElementDao" />
        <property name="migrateElementJobFactory">
          <bean class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
            <property name="targetBeanName">
              <idref local="migrateElementJob" />
            </property>
          </bean>
        </property>
    </bean>
    
    <!-- This service migrates the modeling data in ITBP from version 1.16 to 1.17 -->
    <bean id="modelingMigrationServiceImpl" class="sernet.verinice.service.bp.migration.ModelingMigrationServiceImpl">
        <property name="commandService" ref="hibernateCommandService" />
        <property name="migrateItNetworkJobFactory">
          <bean class="org.springframework.beans.factory.config.ObjectFactoryCreatingFactoryBean">
            <property name="targetBeanName">
              <idref local="migrateItNetworkJobImpl" />
            </property>
          </bean>
        </property>
    </bean>
    
    <bean id="modelingMigrationServiceExecuter" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
        <property name="transactionManager" ref="txManager" />
        <property name="target" ref="modelingMigrationServiceImpl" />
        <property name="transactionAttributes">
            <props>
                <prop key="isMigrationRequired">PROPAGATION_REQUIRES_NEW</prop>
            </props>
        </property>
    </bean>
    
     <!-- This service migrates the modeling data in ITBP from version 1.16 to 1.17 -->
    <bean id="modelingMigrationService" class="sernet.verinice.service.bp.migration.ModelingMigrationDatabaseServiceImpl">
        <property name="modelingMigrationService" ref="modelingMigrationServiceExecuter" />
        <property name="elementDao" ref="cnaTreeElementDao" />
    </bean>
    
</beans>
